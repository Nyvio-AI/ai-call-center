// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import type { AgentServiceCreateAgentData, AgentServiceCreateAgentResponse, AgentServiceCreateAgentError, AgentServiceGetAllAgentsData, AgentServiceGetAllAgentsResponse, AgentServiceGetAgentByIdData, AgentServiceGetAgentByIdResponse, AgentServiceGetAgentByIdError, AgentServiceUpdateAgentData, AgentServiceUpdateAgentResponse, AgentServiceUpdateAgentError, AgentServiceDeleteAgentData, AgentServiceDeleteAgentResponse, AgentServiceDeleteAgentError, CallServiceInitiateCallData, CallServiceInitiateCallResponse, CallServiceInitiateCallError, CallServiceGetCallRecordsData, CallServiceGetCallRecordsResponse, CallServiceGetCallRecordsError, CallServiceGetCallRecordByIdData, CallServiceGetCallRecordByIdResponse, CallServiceGetCallRecordByIdError, CallServiceUpdateCallStatusData, CallServiceUpdateCallStatusResponse, CallServiceUpdateCallStatusError, CallWebhooksHandleCallEventApiWebhooksCallWebhooksHandleCallEventPostData, CallWebhooksHandleAudioStreamApiWebhooksCallWebhooksHandleAudioStreamPostData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

/**
 * Agent Service Create Agent
 * Create a new AI agent with the given configuration.
 */
export const agentServiceCreateAgent = <ThrowOnError extends boolean = false>(options: Options<AgentServiceCreateAgentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AgentServiceCreateAgentResponse, AgentServiceCreateAgentError, ThrowOnError>({
        url: '/api/agent_service/create_agent',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Agent Service Get All Agents
 * Get all active agents.
 */
export const agentServiceGetAllAgents = <ThrowOnError extends boolean = false>(options?: Options<AgentServiceGetAllAgentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AgentServiceGetAllAgentsResponse, unknown, ThrowOnError>({
        url: '/api/agent_service/get_all_agents',
        ...options
    });
};

/**
 * Agent Service Get Agent By Id
 * Get an agent by its ID.
 */
export const agentServiceGetAgentById = <ThrowOnError extends boolean = false>(options: Options<AgentServiceGetAgentByIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AgentServiceGetAgentByIdResponse, AgentServiceGetAgentByIdError, ThrowOnError>({
        url: '/api/agent_service/get_agent_by_id',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Agent Service Update Agent
 * Update an existing agent.
 */
export const agentServiceUpdateAgent = <ThrowOnError extends boolean = false>(options: Options<AgentServiceUpdateAgentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AgentServiceUpdateAgentResponse, AgentServiceUpdateAgentError, ThrowOnError>({
        url: '/api/agent_service/update_agent',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Agent Service Delete Agent
 * Soft delete an agent by setting is_active to False.
 */
export const agentServiceDeleteAgent = <ThrowOnError extends boolean = false>(options: Options<AgentServiceDeleteAgentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AgentServiceDeleteAgentResponse, AgentServiceDeleteAgentError, ThrowOnError>({
        url: '/api/agent_service/delete_agent',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Call Service Initiate Call
 * Initiate a call using Plivo API with the specified agent.
 */
export const callServiceInitiateCall = <ThrowOnError extends boolean = false>(options: Options<CallServiceInitiateCallData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CallServiceInitiateCallResponse, CallServiceInitiateCallError, ThrowOnError>({
        url: '/api/call_service/initiate_call',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Call Service Get Call Records
 * Get recent call records.
 */
export const callServiceGetCallRecords = <ThrowOnError extends boolean = false>(options: Options<CallServiceGetCallRecordsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CallServiceGetCallRecordsResponse, CallServiceGetCallRecordsError, ThrowOnError>({
        url: '/api/call_service/get_call_records',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Call Service Get Call Record By Id
 * Get a call record by its ID.
 */
export const callServiceGetCallRecordById = <ThrowOnError extends boolean = false>(options: Options<CallServiceGetCallRecordByIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CallServiceGetCallRecordByIdResponse, CallServiceGetCallRecordByIdError, ThrowOnError>({
        url: '/api/call_service/get_call_record_by_id',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Call Service Update Call Status
 * Update the status of a call record.
 */
export const callServiceUpdateCallStatus = <ThrowOnError extends boolean = false>(options: Options<CallServiceUpdateCallStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CallServiceUpdateCallStatusResponse, CallServiceUpdateCallStatusError, ThrowOnError>({
        url: '/api/call_service/update_call_status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Call Webhooks Handle Call Event
 */
export const callWebhooksHandleCallEventApiWebhooksCallWebhooksHandleCallEventPost = <ThrowOnError extends boolean = false>(options?: Options<CallWebhooksHandleCallEventApiWebhooksCallWebhooksHandleCallEventPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/api/webhooks/call_webhooks/handle_call_event',
        ...options
    });
};

/**
 * Call Webhooks Handle Audio Stream
 */
export const callWebhooksHandleAudioStreamApiWebhooksCallWebhooksHandleAudioStreamPost = <ThrowOnError extends boolean = false>(options?: Options<CallWebhooksHandleAudioStreamApiWebhooksCallWebhooksHandleAudioStreamPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/api/webhooks/call_webhooks/handle_audio_stream',
        ...options
    });
};